---
// src/pages/profile.astro
// This is the Profile page of our Mini App, accessible only to authenticated users.
// It fetches user data from our /api/user endpoint and provides a logout option.

// Define a type for the user data we expect from the API.
// This interface is used for type-checking within the Astro component's frontmatter,
// but client-side JavaScript doesn't directly use type annotations.
interface UserData {
  telegram_id: number;
  username?: string | null;
  first_name?: string | null;
  last_name?: string | null;
  photo_url?: string | null;
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Your Profile</title>
    <style>
      /* Basic styling for the Profile page, adapting to Telegram's theme */
      body {
        font-family: Arial, sans-serif;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        margin: 0;
        background-color: var(--tg-theme-bg-color, #ffffff);
        color: var(--tg-theme-text-color, #000000);
        transition: background-color 0.3s ease, color 0.3s ease;
      }
      .profile-card {
        text-align: center;
        padding: 30px;
        background-color: var(--tg-theme-secondary-bg-color, #f0f0f0);
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        width: 90%;
      }
      h1 {
        color: var(--tg-theme-text-color, #000000);
        margin-bottom: 20px;
      }
      .profile-picture {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 20px;
        border: 3px solid var(--tg-theme-link-color, #3498db);
      }
      p {
        margin: 10px 0;
        line-height: 1.5;
      }
      strong {
        color: var(--tg-theme-link-color, #007bff);
      }
      button {
        background-color: var(--tg-theme-button-color, #dc3545); /* Red for logout, fallback */
        color: var(--tg-theme-button-text-color, #ffffff);
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        margin-top: 30px;
        transition: background-color 0.3s ease, opacity 0.3s ease;
      }
      button:hover {
        opacity: 0.9;
      }
      .loader {
        border: 4px solid var(--tg-theme-hint-color, #f3f3f3);
        border-top: 4px solid var(--tg-theme-link-color, #3498db);
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 2s linear infinite;
        margin: 20px auto;
      }
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>
  </head>
  <body>
    <div class="profile-card">
      <h1>Your Profile</h1>
      <div id="loading" class="loader"></div>
      <div id="user-profile" style="display: none;">
        <img id="profile-photo" class="profile-picture" alt="Profile Picture" style="display: none;" />
        <p>Telegram ID: <strong id="telegram-id-display"></strong></p>
        <p>Username: <strong id="username-display"></strong></p>
        <p>Name: <strong id="full-name-display"></strong></p>
        <button id="logout-button">Logout</button>
      </div>
      <div id="error-message" style="color: red; display: none;"></div>
    </div>

    <script type="module">
      import WebApp from '@twa-dev/sdk'; // Import the Telegram WebApp SDK

      // Get references to our HTML elements
      const loadingElement = document.getElementById('loading');
      const userProfileElement = document.getElementById('user-profile');
      const profilePhotoElement = document.getElementById('profile-photo');
      const telegramIdDisplay = document.getElementById('telegram-id-display');
      const usernameDisplay = document.getElementById('username-display');
      const fullNameDisplay = document.getElementById('full-name-display');
      const logoutButton = document.getElementById('logout-button');
      const errorMessageElement = document.getElementById('error-message');

      // Initialize Telegram WebApp SDK
      WebApp.ready();

      // Apply Telegram's theme parameters, similar to the Home page
      if (WebApp.themeParams) {
        document.documentElement.style.setProperty('--tg-theme-bg-color', WebApp.themeParams.bg_color || '#ffffff');
        document.documentElement.style.setProperty('--tg-theme-text-color', WebApp.themeParams.text_color || '#000000');
        document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', WebApp.themeParams.secondary_bg_color || '#f0f0f0');
        document.documentElement.style.setProperty('--tg-theme-button-color', WebApp.themeParams.button_color || '#dc3545'); // Use red for logout button by default
        document.documentElement.style.setProperty('--tg-theme-button-text-color', WebApp.themeParams.button_text_color || '#ffffff');
        document.documentElement.style.setProperty('--tg-theme-link-color', WebApp.themeParams.link_color || '#3498db');
        document.documentElement.style.setProperty('--tg-theme-hint-color', WebApp.themeParams.hint_color || '#808080');
      }
      WebApp.setBackgroundColor(WebApp.themeParams.secondary_bg_color || '#f0f0f0');


      async function fetchUserProfile() {
        try {
          loadingElement.style.display = 'block'; // Show loader
          userProfileElement.style.display = 'none'; // Hide profile info
          errorMessageElement.style.display = 'none'; // Hide any previous errors

          // Call our /api/user endpoint to get the logged-in user's data.
          // This request will automatically send our session cookie.
          const response = await fetch('/api/user');
          const data = await response.json();

          if (response.ok) {
            // User data fetched successfully
            const user = data.user; // <-- NO TYPE ANNOTATION HERE
            console.log('User profile data:', user);

            // Populate HTML elements with user data
            telegramIdDisplay.textContent = user.telegram_id.toString(); // Ensure it's a string
            usernameDisplay.textContent = user.username || 'N/A';
            fullNameDisplay.textContent = `${user.first_name || ''} ${user.last_name || ''}`.trim() || 'N/A';

            if (user.photo_url) {
              profilePhotoElement.src = user.photo_url;
              profilePhotoElement.style.display = 'block'; // Show image if URL exists
            } else {
              profilePhotoElement.style.display = 'none'; // Hide if no photo
            }

            userProfileElement.style.display = 'block'; // Show the profile card

            // If Telegram MainButton was shown on home, hide it on profile.
            if (WebApp.MainButton) {
              WebApp.MainButton.hide();
            }

          } else if (response.status === 401) {
            // Unauthorized, meaning session is invalid/expired.
            // Redirect user to the home page for re-authentication.
            errorMessageElement.textContent = `Session expired. Redirecting to login...`;
            errorMessageElement.style.display = 'block';
            console.warn('Unauthorized access to profile. Redirecting to home.');
            // Call logout function, but without confirmation, and force redirect
            await logoutUser(false); // `false` means no confirmation dialog
          } else {
            // Other errors (e.g., 500 from API)
            errorMessageElement.textContent = `Error: ${data.error || 'Failed to fetch profile'}`;
            errorMessageElement.style.display = 'block';
            console.error('Failed to fetch user profile:', data);
            WebApp.showAlert(`Error: ${data.error || 'Failed to load profile'}`);
          }
        } catch (error) {
          errorMessageElement.textContent = `An error occurred: ${error.message}`;
          errorMessageElement.style.display = 'block';
          console.error('Fetch error:', error);
          WebApp.showAlert(`An error occurred: ${error.message}`);
        } finally {
          loadingElement.style.display = 'none'; // Hide the loader
        }
      }

      async function logoutUser(showConfirmation = true) {
        if (showConfirmation) {
          // Use Telegram's built-in confirmation if available, otherwise browser's.
          if (WebApp.showConfirm) {
              const confirmed = await WebApp.showConfirm('Are you sure you want to log out?');
              if (!confirmed) return;
          } else if (!confirm('Are you sure you want to log out?')) {
              return;
          }
        }

        try {
          // Call our /api/user/logout endpoint to clear the session cookie.
          const response = await fetch('/api/user/logout', { method: 'POST' });
          if (response.ok) {
            console.log('Logged out successfully. Redirecting to home.');
            window.location.href = '/'; // Redirect to the home page after successful logout.
          } else {
            const data = await response.json();
            WebApp.showAlert(`Logout failed: ${data.error || 'Unknown error'}`);
            console.error('Logout error:', data);
          }
        } catch (error) {
          console.error('Logout fetch error:', error);
          WebApp.showAlert('An error occurred during logout.');
        }
      }

      // Attach event listener to the logout button
      logoutButton.addEventListener('click', () => logoutUser());

      // Fetch user profile data when the page loads
      fetchUserProfile();
    </script>
  </body>
</html>